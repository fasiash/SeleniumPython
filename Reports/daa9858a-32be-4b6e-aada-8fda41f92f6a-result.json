{"name": "test_addCustomer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=120.0.6099.131)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CEE02142+3514994]\n\t(No symbol) [0x00007FF6CEA20CE2]\n\t(No symbol) [0x00007FF6CE8C74C3]\n\t(No symbol) [0x00007FF6CE90B6D7]\n\t(No symbol) [0x00007FF6CE90A03E]\n\t(No symbol) [0x00007FF6CE935FEA]\n\t(No symbol) [0x00007FF6CE9063B6]\n\t(No symbol) [0x00007FF6CE936490]\n\t(No symbol) [0x00007FF6CE9528F6]\n\t(No symbol) [0x00007FF6CE935D93]\n\t(No symbol) [0x00007FF6CE904BDC]\n\t(No symbol) [0x00007FF6CE905C64]\n\tGetHandleVerifier [0x00007FF6CEE2E16B+3695259]\n\tGetHandleVerifier [0x00007FF6CEE86737+4057191]\n\tGetHandleVerifier [0x00007FF6CEE7E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6CEB504F9+689705]\n\t(No symbol) [0x00007FF6CEA2C048]\n\t(No symbol) [0x00007FF6CEA28044]\n\t(No symbol) [0x00007FF6CEA281C9]\n\t(No symbol) [0x00007FF6CEA188C4]\n\tBaseThreadInitThunk [0x00007FFD9F55257D+29]\n\tRtlUserThreadStart [0x00007FFDA184AA58+40]", "trace": "self = <test_addCustomer.Test_003_AddCustomer object at 0x00000190EBEE3830>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db97d02ae38af836b851e37a85099c09\")>\n\n    @pytest.mark.sanity\n    @pytest.mark.regression\n    def test_addCustomer(self, setup):\n        self.logger.info(\"************* Test_003_AddCustomer **********\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n    \n        self.lp = Login(self.driver)\n        self.lp.setUsername(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        self.logger.info(\"************* Login succesful **********\")\n    \n        self.logger.info(\"******* Starting Add Customer Test **********\")\n        time.sleep(2)\n        self.addcust = AddCustomer(self.driver)\n        self.addcust.clickOnCustomerMenu()\n        time.sleep(2)\n        self.addcust.clickOnCustomerMenuItem()\n        time.sleep(2)\n        self.addcust.clickOnAddnew()\n        time.sleep(2)\n        self.logger.info(\"************* Providing customer info **********\")\n        time.sleep(2)\n        self.email = random_generator() + \"@gmail.com\"\n>       self.addcust.set_email(self.email)\n\ntestCases\\test_addCustomer.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\AddCustomersPage.py:51: in set_email\n    self.driver.find_element(By.XPATH, self.Email_text_xpath).send_keys(email)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000190EC85BB00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6CEA188C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD9F55257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDA184AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=120.0.6099.131)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CEE02142+3514994]\nE       \t(No symbol) [0x00007FF6CEA20CE2]\nE       \t(No symbol) [0x00007FF6CE8C74C3]\nE       \t(No symbol) [0x00007FF6CE90B6D7]\nE       \t(No symbol) [0x00007FF6CE90A03E]\nE       \t(No symbol) [0x00007FF6CE935FEA]\nE       \t(No symbol) [0x00007FF6CE9063B6]\nE       \t(No symbol) [0x00007FF6CE936490]\nE       \t(No symbol) [0x00007FF6CE9528F6]\nE       \t(No symbol) [0x00007FF6CE935D93]\nE       \t(No symbol) [0x00007FF6CE904BDC]\nE       \t(No symbol) [0x00007FF6CE905C64]\nE       \tGetHandleVerifier [0x00007FF6CEE2E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6CEE86737+4057191]\nE       \tGetHandleVerifier [0x00007FF6CEE7E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6CEB504F9+689705]\nE       \t(No symbol) [0x00007FF6CEA2C048]\nE       \t(No symbol) [0x00007FF6CEA28044]\nE       \t(No symbol) [0x00007FF6CEA281C9]\nE       \t(No symbol) [0x00007FF6CEA188C4]\nE       \tBaseThreadInitThunk [0x00007FFD9F55257D+29]\nE       \tRtlUserThreadStart [0x00007FFDA184AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "8329babb-35f4-454a-b7bc-7e73412a6e9e-attachment.txt", "type": "text/plain"}], "start": 1704690703101, "stop": 1704690718113, "uuid": "9c1a0461-4cac-4f43-ae7a-f10694cdd968", "historyId": "a2c99840c6cb723890562fad899bafa6", "testCaseId": "a2c99840c6cb723890562fad899bafa6", "fullName": "testCases.test_addCustomer.Test_003_AddCustomer#test_addCustomer", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_addCustomer"}, {"name": "subSuite", "value": "Test_003_AddCustomer"}, {"name": "host", "value": "DESKTOP-3R0P461"}, {"name": "thread", "value": "10708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_addCustomer"}]}